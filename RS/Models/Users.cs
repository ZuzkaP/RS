//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RS.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class Users
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Users()
        {
            this.UsersRoles = new HashSet<UsersRoles>();
            this.Permanents = new HashSet<Permanents>();
            this.Trainings = new HashSet<Trainings>();
            this.TrainingUsers = new HashSet<TrainingUsers>();
        }


        //[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        //public virtual ICollection<UsersRoles> UsersRoles { get; set; }
        //[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Permanents> Permanents { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Trainings> Trainings { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TrainingUsers> TrainingUsers { get; set; }


        public int user_id { get; set; }
        [DisplayFormat(ConvertEmptyStringToNull = false)]
        [RegularExpression(@"^([0-9a-zA-Z]([\+\-_\.][0-9a-zA-Z]+)*)+@(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]*\.)+[a-zA-Z0-9]{2,3})$",
         ErrorMessage = "Please provide valid email id")]
        public string email { get; set; }

        [Required]
        [Display(Name = "First name: ")]
        public string first_name { get; set; }

        [Required]
        [Display(Name = "Last name: ")]
        public string last_name { get; set; }

        [Required]
        [Display(Name = "Phone number: ")]
        public string phone_number { get; set; }

        [Required]
        [DisplayFormat(ConvertEmptyStringToNull = false)]
        [DataType(DataType.Password)]
        [Display(Name = "Password: ")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be 8 char long.")]
        public string password { get; set; }


        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }


        [Display(Name = "Remember on this computer")]
        public bool RememberMe { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<UsersRoles> UsersRoles { get; set; }

        private static ICollection<Roles> getRoles(ICollection<UsersRoles> from)
        {
            ICollection<Roles> c = new List<Roles>();
            foreach (UsersRoles ur in from)
            {
                c.Add(ur.Roles);
            }

            return c;
        }

        private static bool ArraysAreSame(ICollection<Roles> c1, ICollection<Roles> c2)
        {
            foreach (Roles userRole in c1)
            {
                if (!c2.Contains(userRole))
                {
                    return false;
                }
            }

            return true;
        }

        public override bool Equals(object obj)
        {
            if (!(obj is Users))
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            Users other = (Users)obj;
            return email.Equals(other.email) && first_name.Equals(other.first_name)
                && last_name.Equals(other.last_name) && phone_number.Equals(other.phone_number)
                && ArraysAreSame(getRoles(UsersRoles), getRoles(other.UsersRoles));
        }
    }
}


       